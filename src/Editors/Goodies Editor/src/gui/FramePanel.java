/*
 * FramePanel.java
 *
 * Created on 26 November 2008, 15:08
 */

package gui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;

import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import util.IColorTaker;
import util.ICoordinatesTaker;
import util.IntPoint;

import frames.Frame;
import java.awt.Cursor;

/**
 * Panel that holds a frame, shows it and allows it's mass center manipulation
 * @author  Gil Costa
 */
public class FramePanel extends APanelWithScroll implements MouseMotionListener, MouseListener{
    /** default serial ID*/
	private static final long serialVersionUID = 1L;
	
	//---------------------
	// ---- CONSTANTS ----
	//---------------------
	
	protected static final int CM_RADIUS = 8;
	protected static final int CM_SIZE = 2*CM_RADIUS+1;
	
	
	//------------------
	// ---- FIELDS ----
	//------------------
	
	/** the frame to manipulate */
	protected Frame frame;
	protected boolean showCM;
	protected boolean pickingColor;
	
	protected ICoordinatesTaker coordinatesTaker;
	protected IColorTaker colorTaker;
	

	
	
	
	// ----------------------------
	//  ----   CONSTRUCTORS   ----
	// ----------------------------
	/** Creates new form FramePanel */
    public FramePanel(Scroller scroller, ICoordinatesTaker coordinatesTaker, IColorTaker colorTaker) {
    	super(scroller);
    	this.coordinatesTaker = coordinatesTaker;
    	this.colorTaker = colorTaker;
    	frame = null;
    	showCM = true;
    	pickingColor = false;
        initComponents();
        this.addMouseListener(this);
        this.addMouseMotionListener(this);
    }
    
    
    
    // -----------------------
	//  ----   SETTERS   ----
	// -----------------------
    /** set frame */
    public void setFrame(Frame f){
    	this.frame = f;
        if (frame == null) return;
    	setTrueWidth(f.getImage().getWidth());
    	setTrueHeight(f.getImage().getHeight());
    	updateSize(-1,-1);
    	repaint();
    }
    /** set CM showing or not */
    public void showCM(boolean show){
    	showCM = show;
    	repaint();
    }
    
    public void pickColor(boolean pick){
    	pickingColor = pick;
    }
    
    // -----------------------
	//  ----   GETTERS   ----
	// -----------------------
    public Frame getFrame(){
    	return frame;
    }
    
    
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents



	
	
	// -----------------------------------
	//  ------   MOUSE LISTENERS   ------
	// -----------------------------------
    
    //____________________
    // ---- DRAGGING ----
	@Override
	public void mouseDragged(MouseEvent e) {
		if (frame == null || !SwingUtilities.isLeftMouseButton(e)) return;
		int mouseX = Math.min(Math.max(0, e.getX()), (int)((frame.getImage().getWidth()-1)*scaleFactor));
		int mouseY = Math.min(Math.max(0, e.getY()), (int)((frame.getImage().getHeight()-1)*scaleFactor));
        //int mouseX = Math.max(0, e.getX());
		//int mouseY = Math.max(0, e.getY());
		if (pickingColor && colorTaker!=null){
			colorTaker.takeColor(new Color(frame.getImage().getRGB((int)(mouseX/scaleFactor), (int)(mouseY/scaleFactor))));
		}
		else if (showCM){
			// get CM old position to clear it after affecting it
			int x = frame.getCM().getX();
			int y = frame.getCM().getY();
			frame.setCM(new IntPoint((int)(mouseX/scaleFactor),(int)(mouseY/scaleFactor)));
			coordinatesTaker.takeCoordinates(frame.getCM().getX(), frame.getCM().getY(),0);
			repaintCursor(x,y);	// clear last CM position
			repaintCM();		// paint its new position
		}
	}
	
	
	@Override public void mouseReleased(MouseEvent e) {	}
	@Override public void mouseEntered(MouseEvent e) { }
	@Override public void mouseExited(MouseEvent e) { }
	@Override public void mouseMoved(MouseEvent e) {
        if(pickingColor) setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
        else setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }
	@Override
	public void mouseClicked(MouseEvent e) { mouseDragged(e); }
	@Override
	public void mousePressed(MouseEvent e) { mouseDragged(e); }
  
	
	
	
	
	
	
	
	// -----------------------
	//  ----   REPAINT   ----
	// -----------------------
    public void repaintCM(){
    	int x = frame.getCM().getX();
		int y = frame.getCM().getY();
		repaintCursor(x, y);
    }
    protected void repaintCursor(int x, int y){
		repaint(new Rectangle((int)(x*scaleFactor+(0.5*scaleFactor))-CM_RADIUS,(int)(y*scaleFactor+(0.5*scaleFactor))-CM_RADIUS,CM_SIZE,CM_SIZE));
    }
    
    
    
    
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		if (frame == null) return;
		BufferedImage img = frame.getImage();
		if (img!=null){
			int imgW = (int)(img.getWidth()*scaleFactor);
			int imgH = (int)(img.getHeight()*scaleFactor);
            g.setColor(Color.BLACK);
            g.drawRect(0, 0, imgW, imgH);
			g.drawImage(img, 0,0,imgW, imgH,this);
            if (showCM){
                int cx = (int)(frame.getCM().getX()*scaleFactor+(0.5*scaleFactor));
                int cy = (int)(frame.getCM().getY()*scaleFactor+(0.5*scaleFactor));
                // draw CM
                g.setColor(Color.WHITE);
                g.drawLine(cx-CM_RADIUS, cy, cx-1, cy);
                g.drawLine(cx+CM_RADIUS, cy, cx+1, cy);
                g.drawLine(cx, cy-CM_RADIUS, cx, cy-1);
                g.drawLine(cx, cy+CM_RADIUS, cx, cy+1);
            }
		}
		
	}


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
