/*
 * MassCenterPanel.java
 *
 * Created on 27 November 2008, 10:11
 */

package gui;

import frames.Frame;
import image.ImageUtils;
import java.awt.Color;
import java.awt.image.BufferedImage;
import util.IntPoint;


/**
 *
 * @author  Gil Costa
 * TODO: histograms to compute lines and collumns
 */
public class StripPanel extends javax.swing.JPanel {
    /** image */
    BufferedImage img;
    /** panel that shows the image */
    FramePanel framePanel;
    
    /** Creates new form MassCenterPanel */
    public StripPanel() {
        initComponents();
        cmCheck.setSelected(false);
        setAllEnabled(false);
    }
    
    //---------------------
    // ----- SETTERS -----
    //---------------------
    
    public void setAllEnabled(boolean enabled){
        this.setEnabled(enabled);
        cmCheck.setEnabled(enabled);
        if (enabled && cmCheck.isSelected())
            setFieldsEnabled(true);
        else setFieldsEnabled(false);
    }
    
    protected void setFieldsEnabled(boolean enabled){
        panel.setEnabled(enabled);
        colsField.setEnabled(enabled);
        rowsField.setEnabled(enabled);
        //autoBut.setEnabled(enabled);
    }
    
    
    public void setFramePanel(FramePanel framePanel){
        this.framePanel = framePanel;
        reset();
    }
    public void setImage(BufferedImage img){
       this.img = img;
       reset();
    }
    
    
    protected void reset(){
        boolean enabled = framePanel!=null && img!=null;
        cmCheck.setSelected(enabled);
        setAllEnabled(enabled);
    }
    
    
    protected void updateGrid(){
        int cols = getCols();
        int rows = getRows();
        Frame f = framePanel.getFrame();
        f.setImg(img.getSubimage(0, 0, img.getWidth()/cols, img.getHeight()/rows));
        framePanel.repaint();
    }
    
    
    
    
    
    //-------------------
    // ---- GETTERS ----
    //-------------------
    
    public boolean isChecked(){
        return cmCheck.isSelected();
    }
    
    public int getCols(){
        int cols = 1;
        try{
            cols = Integer.parseInt(colsField.getText());
        }catch (NumberFormatException e){}
        if (cols <1 || cols >= img.getWidth()-1) cols = 1;
        return cols;
    }
    
    public int getRows(){
        int rows = 1;
        try{
            rows = Integer.parseInt(rowsField.getText());
        }catch (NumberFormatException e){}
        if (rows <1 || rows >= img.getHeight()-1) rows = 1;
        return rows;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rowsField = new javax.swing.JTextField();
        colsField = new javax.swing.JTextField();
        cmCheck = new javax.swing.JCheckBox();

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jLabel1.setText("Columns");

        jLabel2.setText("Rows");

        rowsField.setColumns(3);
        rowsField.setText("1");
        rowsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rowsFieldActionPerformed(evt);
            }
        });
        rowsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rowsFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rowsFieldFocusLost(evt);
            }
        });

        colsField.setColumns(3);
        colsField.setText("1");
        colsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colsFieldActionPerformed(evt);
            }
        });
        colsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                colsFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                colsFieldFocusLost(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rowsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(colsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rowsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cmCheck.setSelected(true);
        cmCheck.setText("Strip Image");
        cmCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cmCheck)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cmCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rowsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rowsFieldActionPerformed
        updateGrid();
        requestFocus();
}//GEN-LAST:event_rowsFieldActionPerformed

    private void rowsFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rowsFieldFocusGained
        rowsField.selectAll();
}//GEN-LAST:event_rowsFieldFocusGained

    private void rowsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rowsFieldFocusLost
        updateGrid();
}//GEN-LAST:event_rowsFieldFocusLost

    private void colsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colsFieldActionPerformed
        updateGrid();
        rowsField.requestFocus();
}//GEN-LAST:event_colsFieldActionPerformed

    private void colsFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_colsFieldFocusGained
        colsField.selectAll();
}//GEN-LAST:event_colsFieldFocusGained

    private void colsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_colsFieldFocusLost
        updateGrid();
}//GEN-LAST:event_colsFieldFocusLost

    private void cmCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmCheckActionPerformed
        boolean checked = cmCheck.isSelected();
        setFieldsEnabled(checked);
        if (!checked){
            framePanel.getFrame().setImg(img);
            framePanel.repaint();
        }
        else updateGrid();
    }//GEN-LAST:event_cmCheckActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        if (cmCheck.isSelected())
            colsField.requestFocus();
    }//GEN-LAST:event_formFocusGained
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cmCheck;
    private javax.swing.JTextField colsField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel panel;
    private javax.swing.JTextField rowsField;
    // End of variables declaration//GEN-END:variables
    
}
