/*
 * topPanel.java
 *
 * Created on 26 November 2008, 15:08
 */

package gui;


import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;

import javax.swing.JPanel;



/**
 * Panel that holds a FrameCollection, shows them and allows multiple sellections
 * @author  Gil Costa
 */
public abstract class APanelWithScroll extends JPanel implements MouseWheelListener{
	/** default version id */
	private static final long serialVersionUID = 1L;

	//---------------------
	// ---- CONSTANTS ----
	//---------------------
	
	protected static final Color BACKGROUND_COLOR = new Color(72,48,168);

	protected static final double SCALE_SCROLL_FACTOR = 0.25;
	protected static final float MAX_ZOOM = 15.f;
	protected static final float MIN_ZOOM = 0.1f;
	protected static final float ZOOM_KNOB = 0.1f;

	//------------------
	// ---- FIELDS ----
	//------------------

	/** the parent scroller */
	protected Scroller scroller;
	
	/** scale factor for resizing */
	protected float scaleFactor;
	protected int trueWidth, trueHeight;
	/** scale transformation */




	// ----------------------------
	//  ----   CONSTRUCTORS   ----
	// ----------------------------
	/** Creates new form FramePanel */
	public APanelWithScroll(Scroller scroller) {
		this.scroller = scroller;
		initComponents();
		scaleFactor = 1;
		this.addMouseWheelListener(this);
	}


	// -----------------------
	//  ----   SETTERS   ----
	// -----------------------
	public void resetScale(){
		scaleFactor = 1;
		updateSize(scroller.getWidth()/2,scroller.getHeight()/2);
        this.repaint();
	}
	
	protected void setTrueWidth(int width){
		trueWidth = width;
	}
	protected void setTrueHeight(int height){
		trueHeight = height; 
	}
	protected void setTrueSize(int width, int height){
		trueWidth = width; trueHeight = height;
	}
	
	protected void updateSize(int cx, int cy){
		Dimension newSize = new Dimension((int)(getTrueWidth()*scaleFactor),(int)(getTrueHeight()*scaleFactor));
		double h = scroller.getHPosition();
		double v = scroller.getVPosition();
		int scW = scroller.getWidth();
		int scH = scroller.getHeight();
		double ex = scroller.getHIncrement()*((cx-scW/4)*1./scW)*SCALE_SCROLL_FACTOR;
		double ey = scroller.getVIncrement()*((cy-scH/4)*1./scH)*SCALE_SCROLL_FACTOR;
		setPreferredSize(newSize);
		scroller.setViewportView(this);
        if (cx!=-1 && cy!=-1)
            scroller.setPosition(h+ex,v+ey);
	}

	// -----------------------
	//  ----   GETTERS   ----
	// -----------------------

	protected int getTrueWidth(){ return trueWidth; }
	protected int getTrueHeight(){ return trueHeight; }


	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 600, Short.MAX_VALUE)
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 200, Short.MAX_VALUE)
		);
	}// </editor-fold>//GEN-END:initComponents



	// -----------------------------------
	//  ------   MOUSE LISTENERS   ------
	// -----------------------------------

	//_______________________
    // ---- MOUSE WHEEL ----
	@Override
	public void mouseWheelMoved(MouseWheelEvent e) {
		// scale factor
		int x = e.getX()-(int)(getWidth()*scroller.getHPosition());
		int y = e.getY()-(int)(getHeight()*scroller.getVPosition());
		if (e.getWheelRotation()>0)
			scaleFactor = Math.min(scaleFactor*(1+ZOOM_KNOB),MAX_ZOOM);
		else{
			scaleFactor = Math.max(scaleFactor*(1-ZOOM_KNOB),MIN_ZOOM);
			x = 0; y = 0;
		}
		
		// scale panel
		updateSize(x, y);
		repaint();
	}


    protected void clearScr(Graphics g){
        g.setColor(BACKGROUND_COLOR);
		g.fillRect(0, 0, getWidth(), getHeight());
    }
    

	@Override
	public void paintComponent(Graphics g) {
		clearScr(g);
	}


}
